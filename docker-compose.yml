version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: poliq-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: poliq
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - poliq-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: poliq-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - poliq-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO for S3-compatible storage (documents, file uploads)
  minio:
    image: minio/minio
    container_name: poliq-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - poliq-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create initial buckets in MinIO
  minio-init:
    image: minio/mc
    container_name: poliq-minio-init
    depends_on:
      - minio
    networks:
      - poliq-network
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/poliq-documents;
      /usr/bin/mc policy set download myminio/poliq-documents;
      exit 0;
      "

  # Adminer for database management (optional)
  adminer:
    image: adminer
    container_name: poliq-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - poliq-network
    depends_on:
      - postgres

  # Mailhog for email testing (optional)
  mailhog:
    image: mailhog/mailhog
    container_name: poliq-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - poliq-network

networks:
  poliq-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
